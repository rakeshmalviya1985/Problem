class Solution {
private:
int getmax(int arr[] , int size)
{
   int max = INT_MIN;
   for(int i = 0 ; i<size;i++)
   {
       if(arr[i] > max)
       max = arr[i];
   }
   
   return max;
}

void RadixCounSort(int arr[] , int size , int exp1)
{
    int max1 = getmax(arr, size);
    int count[10] ;
    int b[size];

    for(int i = 0;i<10 ;i++)
    {
        count[i] = 0;
    }
   
    for(int i = 0;i<size ;i++)
    {
        count[(arr[i]/exp1)%10]++;
    }

    for(int i = 1;i<10;i++)
    {
        count[i] = count[i]+count[i-1];
    }

    for(int i = size-1;i>=0;i--)
    {
          b[--count[(arr[i]/exp1)%10]]    = arr[i];
    }
         
     int j = 0;
     for(int i = size-1;i>=0 && j < size;i--)
     {
        arr[j] = b[i];
        j++;
     }
     
     return ;
}

void radixSort(int arr[] , int size)
{
    int max = getmax(arr , size);
    
    for(int i = 1 ; max/i > 0;i= i*10)
    {
        RadixCounSort(arr , size,i);
    }
}

int getIndex(int arr[] , int size , int key)
{
    for(int i = 0 ; i<size;i++)
    {
        if(arr[i] == key)
        {
            return i;
        }
    }
    
    return -1;
}
int getSecondHightestValue(int arr[],int size)
{
    for(int i = 0 ; i<size;i++)
    {
        if(arr[i] != arr[0]) 
        return arr[i];
    }
    
    return INT_MIN;
}
    public:

int maxArea(vector<int>& height) {

     int arr[height.size()] ;
    
     int arr1[height.size()];
    for(int i =0;i<height.size();i++)
    {
        arr[i] = height[i];
        arr1[i] = height[i];
    }
    int size = sizeof(arr)/sizeof(arr[0]);
    int max1 = getmax(arr, size);
    radixSort(arr , size); 
   for(int i = 0;i<size;i++)
    {
        cout<<" "<<arr[i];
    }

   cout<<"\n";
   
    cout<<" max value : "<<arr[0];
   int maxIndex = getIndex(arr1,size,arr[0]);
   cout<<"\n ";
   int secHighestValue = getSecondHightestValue(arr,size);
     cout<<" max value : "<<arr[0];
     cout<<" second max value : "<<arr[0];
   int secMaxIndex = getIndex(arr1,size,secHighestValue);
   cout<<" maxIndex "<<maxIndex<< " secMaxIndex "<<secMaxIndex;
   
   int width = 0;
   
   if(maxIndex > secMaxIndex)
     width = maxIndex - secMaxIndex;
   else
     width = secMaxIndex - maxIndex;
    cout<<"\n";
    cout<<" final :  "<<width*secHighestValue;
    return width*secHighestValue;;    
    }

};
